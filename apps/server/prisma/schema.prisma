// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String @id @default(uuid())
  username String @unique @default(cuid())
  email    String @unique
  password String

  profile Profile?

  squadId   String?
  squad     Squad?     @relation(fields: [squadId], references: [id])
  comments  Comment[]
  reactions Reaction[]

  roles  Role[]  @default([USER])
  tokens Token[]

  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

model Profile {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  displayName String?
  bio         String?
  website     String?
  title       String?
  avatarUrl   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Token {
  id    String @id @default(uuid())
  token String @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("tokens")
}

model Category {
  id          String @id @default(uuid())
  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@map("categories")
}

enum PostStatus {
  PUBLISHED
  DRAFT
}

model Post {
  id          String     @id @default(uuid())
  title       String
  description String
  status      PostStatus
  slug        String     @unique
  tags        String[]
  isFeatured  Boolean    @default(false)

  cover String? @default("")
  file  String? @default("")

  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  comments   Comment[]
  reactions  Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Squad {
  id          String @id @default(uuid())
  name        String
  description String
  order       Int

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("squads")
}

model News {
  id            String   @id @default(uuid())
  slug          String   @unique
  title         String
  description   String
  featuredImage String
  files         String[]
  tags          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("news")
}

model Comment {
  id      String @id @default(uuid())
  content String

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  replyToId String?
  replyTo   Comment? @relation("CommentReplies", fields: [replyToId], references: [id])

  replies Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Reaction {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  type ReactionType @default(LIKE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
  @@map("reactions")
}

enum ReactionType {
  LIKE
  DISLIKE
}
